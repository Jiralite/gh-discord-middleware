diff --git a/out/node-file-trace.d.ts b/out/node-file-trace.d.ts
index 2c0e97c5a6e4a5f549f0b6006fa5b7951e7dddaf..018ce2370bdea5ef787b99ced4727e9858fbab08 100644
--- a/out/node-file-trace.d.ts
+++ b/out/node-file-trace.d.ts
@@ -24,7 +24,7 @@ export declare class Job {
     warnings: Set<Error>;
     reasons: NodeFileTraceReasons;
     private cachedFileSystem;
-    constructor({ base, processCwd, exports, conditions, exportsOnly, paths, ignore, log, mixedModules, ts, analysis, cache, fileIOConcurrency, }: NodeFileTraceOptions);
+    constructor({ base, processCwd, exports, conditions, exportsOnly, paths, ignore, log, mixedModules, ts, analysis, cache, web, fileIOConcurrency, }: NodeFileTraceOptions);
     readlink(path: string): Promise<string | null>;
     isFile(path: string): Promise<boolean>;
     isDir(path: string): Promise<boolean>;
diff --git a/out/node-file-trace.js b/out/node-file-trace.js
index c7c27f2e5d81e7c83de78b61a49271df95782226..c89676e623f25a2b113f65ce23f48bc87dc2fe40 100644
--- a/out/node-file-trace.js
+++ b/out/node-file-trace.js
@@ -65,7 +65,7 @@ async function nodeFileTrace(files, opts = {}) {
 exports.nodeFileTrace = nodeFileTrace;
 ;
 class Job {
-    constructor({ base = process.cwd(), processCwd, exports, conditions = exports || ['node'], exportsOnly = false, paths = {}, ignore, log = false, mixedModules = false, ts = true, analysis = {}, cache, 
+    constructor({ base = process.cwd(), processCwd, exports, conditions = exports || ['node'], exportsOnly = false, paths = {}, ignore, log = false, mixedModules = false, ts = true, analysis = {}, cache, web = false,
     // we use a default of 1024 concurrency to balance
     // performance and memory usage for fs operations
     fileIOConcurrency = 1024, }) {
diff --git a/out/resolve-dependency.js b/out/resolve-dependency.js
index ff945895481963eab26994cf103b22a9a5160567..13751d56bde7b9b52cb3b3b75134dff29ef36c61 100644
--- a/out/resolve-dependency.js
+++ b/out/resolve-dependency.js
@@ -61,8 +61,9 @@ async function resolveDir(path, parent, job) {
     if (!await job.isDir(path))
         return;
     const pkgCfg = await getPkgCfg(path, job);
-    if (pkgCfg && typeof pkgCfg.main === 'string') {
-        const resolved = await resolveFile((0, path_1.resolve)(path, pkgCfg.main), parent, job) || await resolveFile((0, path_1.resolve)(path, pkgCfg.main, 'index'), parent, job);
+    if (pkgCfg && ((job.web && (typeof pkgCfg.browser === 'string' || typeof pkgCfg.module === 'string')) || typeof pkgCfg.main === 'string')) {
+        const fieldValue = job.web ? (typeof pkgCfg.browser === 'string' ? pkgCfg.browser : pkgCfg.module || pkgCfg.main) : pkgCfg.main;
+        const resolved = await resolveFile((0, path_1.resolve)(path, fieldValue), parent, job) || await resolveFile((0, path_1.resolve)(path, fieldValue, 'index'), parent, job);
         if (resolved) {
             await job.emitFile(path + path_1.sep + 'package.json', 'resolve', parent);
             return resolved;
diff --git a/out/types.d.ts b/out/types.d.ts
index 6d230ebb6ef27fbb5e084e63d25eff48b260458f..c1178684bbb5c7b2b1739d6e6d7917cb7db0a996 100644
--- a/out/types.d.ts
+++ b/out/types.d.ts
@@ -49,6 +49,7 @@ export interface NodeFileTraceOptions {
     readlink?: (path: string) => Promise<string | null>;
     resolve?: (id: string, parent: string, job: Job, cjsResolve: boolean) => Promise<string | string[]>;
     fileIOConcurrency?: number;
+    web?: boolean;
 }
 export type NodeFileTraceReasonType = 'initial' | 'resolve' | 'dependency' | 'asset' | 'sharedlib';
 export interface NodeFileTraceReasons extends Map<string, {
